DROP DATABASE BGMS;

CREATE DATABASE BGMS;
USE BGMS;

-- Change the delimiter to $$
DELIMITER $$
-- BLOOD GROUPS table
CREATE TABLE BLOOD_GROUPS (
    GROUP_ID INT PRIMARY KEY,
    GROUP_NAME VARCHAR(10) NOT NULL
);

-- DONORS table
CREATE TABLE DONORS (
    DONOR_ID INT PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    BLOOD_GROUP_ID INT,
    BIRTHDATE DATE,
    GENDER CHAR(1),
    PHONE_NUMBER VARCHAR(15),
    ADDRESS VARCHAR(100),
    REGISTRATION_DATE DATE,
    FOREIGN KEY (BLOOD_GROUP_ID) REFERENCES BLOOD_GROUPS(GROUP_ID)
);

-- RECIPIENTS table
CREATE TABLE RECIPIENTS (
    RECIPIENT_ID INT PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    BLOOD_GROUP_ID INT,
    BIRTHDATE DATE,
    GENDER CHAR(1),
    PHONE_NUMBER VARCHAR(15),
    ADDRESS VARCHAR(100),
    REGISTRATION_DATE DATE,
    FOREIGN KEY (BLOOD_GROUP_ID) REFERENCES BLOOD_GROUPS(GROUP_ID)
);

-- BLOOD DONATIONS table
CREATE TABLE BLOOD_DONATIONS (
    DONATION_ID INT PRIMARY KEY,
    DONOR_ID INT,
    DONATION_DATE DATE,
    EXPIRY_DATE DATE,
    QUANTITY_ML DECIMAL(10, 2),
    FOREIGN KEY (DONOR_ID) REFERENCES DONORS(DONOR_ID)
);

-- BLOOD TRANSFUSIONS table

CREATE TABLE BLOOD_TRANSFUSIONS (
    TRANSFUSION_ID INT PRIMARY KEY,
    RECIPIENT_ID INT,
    DONOR_ID INT,
    TRANSFUSION_DATE DATE,
    QUANTITY_ML DECIMAL(10, 2),
    FOREIGN KEY (RECIPIENT_ID) REFERENCES RECIPIENTS(RECIPIENT_ID),
    FOREIGN KEY (DONOR_ID) REFERENCES DONORS(DONOR_ID)
);

-- BLOOD BANK INVENTORY table
CREATE TABLE BLOOD_INVENTORY (
    INVENTORY_ID INT PRIMARY KEY,
    BLOOD_GROUP_ID INT,
    QUANTITY_ML DECIMAL(12, 2),
    EXPIRY_DATE DATE,
    FOREIGN KEY (BLOOD_GROUP_ID) REFERENCES BLOOD_GROUPS(GROUP_ID)
);

-- HOSPITALS table

CREATE TABLE HOSPITALS (
    HOSPITAL_ID INT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    LOCATION VARCHAR(100),
    CONTACT_NUMBER VARCHAR(15)
);

-- OPERATIONS LOG table
CREATE TABLE IF NOT EXISTS OPERATIONS_LOG (
    LOG_ID INT PRIMARY KEY AUTO_INCREMENT,
    LOG_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    OPERATION_TYPE VARCHAR(50),
    DESCRIPTION VARCHAR(255)
);


-- TRANSACTIONS table
-- Create TRANSACTIONS table if not exists
CREATE TABLE TRANSACTIONS (
    TRANSACTION_ID INT PRIMARY KEY AUTO_INCREMENT,
    TRANSACTION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TRANSACTION_TYPE VARCHAR(20),
    AMOUNT DECIMAL(12, 2)
);


-- BLOOD TESTS table
CREATE TABLE BLOOD_TESTS (
    TEST_ID INT PRIMARY KEY,
    TEST_NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(255),
    STANDARD_VALUE VARCHAR(50)
);

-- Reset the delimiter to ;
DELIMITER ;

-- Function to calculate age based on birthdate
DELIMITER $$

CREATE FUNCTION CALCULATE_AGE(BIRTHDATE DATE)
RETURNS INT DETERMINISTIC
BEGIN
    DECLARE AGE INT;
    SET AGE = TIMESTAMPDIFF(YEAR, BIRTHDATE, CURDATE());
    RETURN AGE;
END $$

-- Reset the delimiter to ;
DELIMITER ;

-- Trigger to set registration date for donors
DELIMITER $$

CREATE TRIGGER SET_REGISTRATION_DATE BEFORE INSERT ON DONORS
FOR EACH ROW
BEGIN
    SET NEW.REGISTRATION_DATE = CURDATE();
END $$

-- Reset the delimiter to ;
DELIMITER ;

-- Procedure to log blood transfusions
-- Change the delimiter to $$
DELIMITER $$

CREATE PROCEDURE LOG_BLOOD_TRANSFUSION(
    IN RECIPIENT_ID INT,
    IN DONOR_ID INT,
    IN TRANSFUSION_DATE DATE,
    IN QUANTITY_ML DECIMAL(10, 2)
)
BEGIN
    DECLARE TRANSACTION_SUCCESS BOOLEAN DEFAULT TRUE;

    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
        SET TRANSACTION_SUCCESS = FALSE;

    START TRANSACTION;

    -- Insert into BLOOD_TRANSFUSIONS table
    INSERT INTO BLOOD_TRANSFUSIONS (RECIPIENT_ID, DONOR_ID, TRANSFUSION_DATE, QUANTITY_ML)
    VALUES (RECIPIENT_ID, DONOR_ID, TRANSFUSION_DATE, QUANTITY_ML);

    -- Insert into OPERATIONS_LOG table
    INSERT INTO OPERATIONS_LOG (LOG_DATE, OPERATION_TYPE, DESCRIPTION)
    VALUES (NOW(), 'Blood Transfusion', CONCAT('Transfusion of ', QUANTITY_ML, ' mL to recipient ID ', RECIPIENT_ID));

    -- Insert into TRANSACTIONS table (dummy example, adjust based on your actual logic)
    INSERT INTO TRANSACTIONS (TRANSACTION_DATE, TRANSACTION_TYPE, AMOUNT)
    VALUES (NOW(), 'Blood Transfusion', QUANTITY_ML);

    IF TRANSACTION_SUCCESS THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
END $$

-- Reset the delimiter to ;
DELIMITER ;

-- Insert values into BLOOD_GROUPS table

INSERT INTO BLOOD_GROUPS (GROUP_ID, GROUP_NAME)
VALUES 
    (1, 'A'),
    (2, 'B'),
    (3, 'AB'),
    (4, 'O');

-- Insert values into DONORS table
INSERT INTO DONORS (DONOR_ID, NAME, BLOOD_GROUP_ID, BIRTHDATE, GENDER, PHONE_NUMBER, ADDRESS, REGISTRATION_DATE)
VALUES
    (1, 'HASSAN SAJJAD', 1, '2002-03-17', 'M', '03152435675', 'GULBERG MULTAN', CURDATE()),
    (2, 'AHMAD RASHID', 2, '2008-01-24', 'M', '09876543210', 'ILYAS COLONY KAMALIA', CURDATE()),
    (3, 'FAHAD', 3, '1996-01-16', 'M', '02166645678', 'QUAID -E AZAM ROAD MAILSI', CURDATE()),
    (4, 'ALI SHER', 4, '2004-01-21', 'M', '03244567880', 'ITFAQ COLONY SARGODHA', CURDATE()),
    (5, 'HASNAT FAKHAR', 1, '2003-01-02', 'M', '02134345678', 'BEMISAL COLONY TALAKANG', CURDATE()),
    (6, 'SAAD', 3, '2007-05-06', 'M', '02166645990', 'KISSA KHANI BAZAR PESHAWAR', CURDATE());

-- Insert values into RECIPIENTS table
INSERT INTO RECIPIENTS (RECIPIENT_ID, NAME, BLOOD_GROUP_ID, BIRTHDATE, GENDER, PHONE_NUMBER, ADDRESS, REGISTRATION_DATE)
VALUES
    (1, 'ALI KHAN', 2, '2002-06-17', 'F', '03336566701', 'NEW COLONY CHICHA WATNI', CURDATE()),
    (2, 'HAMZA IRSHAD', 4, '2000-03-12', 'M', '02145666590', 'MODEL TOWN LAHORE', CURDATE()),
    (3, 'AQEEL AHMAD', 3, '1998-03-12', 'M', '02145666450', 'MODEL TOWN BAHAWALPUR', CURDATE()),
     (4, 'UMAR AHMAD', 1, '1995-03-12', 'M', '02145666450', 'MODEL TOWN GUJRANWALA', CURDATE());
     
     
-- Insert values into BLOOD_DONATIONS table
INSERT INTO BLOOD_DONATIONS (DONATION_ID, DONOR_ID, DONATION_DATE, EXPIRY_DATE, QUANTITY_ML)
VALUES
    (1, 1, '2024-03-22', '2024-11-15', 500.00),
    (2, 2, '2024-04-16', '2024-09-20', 700.00),
	(3, 3, '2024-05-15', '2024-11-20', 900.00),
	(4, 5, '2024-05-15', '2024-11-20', 600.00);
	 

-- Insert values into BLOOD_TRANSFUSIONS table
INSERT INTO BLOOD_TRANSFUSIONS (TRANSFUSION_ID, RECIPIENT_ID, DONOR_ID, TRANSFUSION_DATE, QUANTITY_ML)
VALUES
    (1, 2, 1, '2023-03-28', 300.00),
    (2, 1, 2, '2023-05-30', 400.00),
	(3, 4, 5, '2024-06-12', 600.00);
-- Insert values into BLOOD_INVENTORY table
INSERT INTO BLOOD_INVENTORY (INVENTORY_ID, BLOOD_GROUP_ID, QUANTITY_ML, EXPIRY_DATE)
VALUES
    (1, 1, 1500.00, '2023-06-30'),
    (2, 2, 2000.00, '2023-07-31');

-- Insert values into HOSPITALS table
INSERT INTO HOSPITALS (HOSPITAL_ID, NAME, LOCATION, CONTACT_NUMBER)
VALUES
    (1, 'City Hospital ISLAMABAD', 'BLUE AREA ISLAMABAD', '06663234370'),
    (2, 'NISHTAR HOSPITAL', 'GULGASHT MULTAN', '07774536670'),
	 (3, 'KIMS HOSPITAL ', 'G-11 ISLAMABAD', '07774531170'),
      (4, 'ABBASI SHAHEED HOSPITAL', 'SADAR KARACHI', '02224536670'),
	(5, 'ALLAMA IQBAL HOSPITAL', ' HEERA MANDI LAHORE ', '03454536670');
-- Insert values into OPERATIONS_LOG table
INSERT INTO OPERATIONS_LOG (LOG_DATE, OPERATION_TYPE, DESCRIPTION)
VALUES
    (NOW(), 'System Start', 'Initial setup of database'),
    (NOW(), 'Data Import', 'Imported initial data');

-- Insert values into TRANSACTIONS table
INSERT INTO TRANSACTIONS (TRANSACTION_DATE, TRANSACTION_TYPE, AMOUNT)
VALUES
    (NOW(), 'Donation Payment', 100.50),
    (NOW(), 'Service Fee', 25.75),
    (NOW(), 'Donation Payment', 150.00),
    (NOW(), 'Blood Test Fee', 50.00);

-- Query to fetch the names of donors and their respective blood groups
SELECT d.NAME AS Donor_Name, b.GROUP_NAME AS Blood_Group
FROM DONORS d
JOIN BLOOD_GROUPS b ON d.BLOOD_GROUP_ID = b.GROUP_ID;

-- Query to fetch the names of recipients and their registration dates
SELECT NAME AS Recipient_Name, REGISTRATION_DATE
FROM RECIPIENTS;

-- Query to fetch donation details including donor names, donation dates, expiry dates, and quantity
SELECT bd.DONATION_ID, d.NAME AS Donor_Name, bd.DONATION_DATE, bd.EXPIRY_DATE, bd.QUANTITY_ML
FROM BLOOD_DONATIONS bd
JOIN DONORS d ON bd.DONOR_ID = d.DONOR_ID;

-- Query to fetch transfusion details including recipient names, donor names, transfusion dates, and quantity
SELECT bt.TRANSFUSION_ID, r.NAME AS Recipient_Name, d.NAME AS Donor_Name, bt.TRANSFUSION_DATE, bt.QUANTITY_ML
FROM BLOOD_TRANSFUSIONS bt
JOIN RECIPIENTS r ON bt.RECIPIENT_ID = r.RECIPIENT_ID
JOIN DONORS d ON bt.DONOR_ID = d.DONOR_ID;

-- Query to fetch hospital details including name, location, and contact number
SELECT NAME AS Hospital_Name, LOCATION AS LOCATION, CONTACT_NUMBER
FROM HOSPITALS;

-- Query to fetch total quantity of blood available grouped by blood group
SELECT bg.GROUP_NAME AS Blood_Group, SUM(bi.QUANTITY_ML) AS Total_Quantity_ML
FROM BLOOD_INVENTORY bi
JOIN BLOOD_GROUPS bg ON bi.BLOOD_GROUP_ID = bg.GROUP_ID
GROUP BY bg.GROUP_NAME;

-- Query to fetch log entries for blood transfusions
SELECT LOG_DATE, OPERATION_TYPE, DESCRIPTION
FROM OPERATIONS_LOG
WHERE OPERATION_TYPE = 'Blood Transfusion';

-- Query to fetch the average donation payment amount
SELECT AVG(AMOUNT) AS Average_Donation_Amount
FROM TRANSACTIONS
WHERE TRANSACTION_TYPE = 'Donation Payment';

-- Query to fetch blood test names and their descriptions
SELECT TEST_NAME, DESCRIPTION
FROM BLOOD_TESTS;

-- Query to fetch donor names and the quantity of blood donated for donations greater than 600 mL
SELECT d.NAME AS Donor_Name, bd.QUANTITY_ML
FROM DONORS d
JOIN BLOOD_DONATIONS bd ON d.DONOR_ID = bd.DONOR_ID
WHERE bd.QUANTITY_ML > 600;

-- Query to fetch donor names who have donations but no blood tests recorded
SELECT d.NAME AS Donor_Name
FROM DONORS d
LEFT JOIN BLOOD_DONATIONS bd ON d.DONOR_ID = bd.DONOR_ID
LEFT JOIN BLOOD_TESTS bt ON d.DONOR_ID = bt.TEST_ID
WHERE bt.TEST_ID IS NULL AND bd.DONOR_ID IS NOT NULL;

-- Query to fetch the latest transfusion date for each recipient
SELECT bt.RECIPIENT_ID, r.NAME AS Recipient_Name, MAX(bt.TRANSFUSION_DATE) AS Latest_Transfusion_Date
FROM BLOOD_TRANSFUSIONS bt
JOIN RECIPIENTS r ON bt.RECIPIENT_ID = r.RECIPIENT_ID
GROUP BY bt.RECIPIENT_ID, r.NAME;

-- Query to fetch the number of transfusions and total quantity of blood transfused for each hospital
SELECT h.NAME AS Hospital_Name, COUNT(bt.TRANSFUSION_ID) AS Number_of_Transfusions, SUM(bt.QUANTITY_ML) AS Total_Quantity_ML
FROM BLOOD_TRANSFUSIONS bt
JOIN HOSPITALS h ON bt.RECIPIENT_ID = h.HOSPITAL_ID
GROUP BY h.NAME;

-- Query to fetch donation details for donations expiring within the next 12 months
SELECT bd.DONATION_ID, d.NAME AS Donor_Name, bd.EXPIRY_DATE
FROM BLOOD_DONATIONS bd
JOIN DONORS d ON bd.DONOR_ID = d.DONOR_ID
WHERE bd.EXPIRY_DATE <= DATE_ADD(CURDATE(), INTERVAL 12 MONTH);

-- Query to fetch the average quantity of blood transfused
SELECT AVG(QUANTITY_ML) AS Average_Transfusion_Quantity_ML
FROM BLOOD_TRANSFUSIONS;

-- Query to fetch the average quantity of blood donated
SELECT AVG(bd.QUANTITY_ML) AS Average_Quantity_Donated
FROM BLOOD_DONATIONS bd;

-- Query to fetch the total quantity of blood available grouped by blood group
SELECT bg.GROUP_NAME AS Blood_Group, SUM(bi.QUANTITY_ML) AS Total_Quantity_Available
FROM BLOOD_INVENTORY bi
JOIN BLOOD_GROUPS bg ON bi.BLOOD_GROUP_ID = bg.GROUP_ID
GROUP BY bg.GROUP_NAME;

-- Query to fetch the total quantity of blood donated by each donor within the last year
SELECT d.NAME AS Donor_Name, SUM(bd.QUANTITY_ML) AS Total_Quantity_Donated
FROM DONORS d
JOIN BLOOD_DONATIONS bd ON d.DONOR_ID = bd.DONOR_ID
WHERE bd.DONATION_DATE >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY d.NAME;

SELECT * FROM TRANSACTIONS;